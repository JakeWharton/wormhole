apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'

gradlePlugin {
  plugins {
    wormhole {
      id = 'com.jakewharton.wormhole'
      implementationClass = 'com.jakewharton.wormhole.gradle.AndroidWormhole'
    }
  }
}

configurations {
  fixtureClasspath
}

// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
tasks.getByName('pluginUnderTestMetadata').
    getPluginClasspath().
    from(configurations.fixtureClasspath)

dependencies {
  implementation project(':wormhole-jar-rewriter')
  implementation project(':wormhole-api-versions')
  compileOnly deps.androidGradlePlugin

  fixtureClasspath deps.androidGradlePlugin
  fixtureClasspath deps.androidLint

  testImplementation deps.androidGradlePlugin
  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation gradleTestKit()
}

sourceSets {
  main.java.srcDir "$buildDir/gen"
}

task pluginVersion {
  def outputDir = file("$buildDir/gen")

  inputs.property 'version', project.version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/com/jakewharton/wormhole/gradle/version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package com.jakewharton.wormhole.gradle

internal const val wormholeVersion = "${project.version}"
"""
  }
}

tasks.getByName('compileKotlin').dependsOn('pluginVersion')

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')

// From https://stackoverflow.com/a/59418448/132047
tasks.named('compileGroovy') {
  // Groovy only needs the declared dependencies
  // and not the output of compileJava
  classpath = sourceSets.main.compileClasspath
}
tasks.named('compileKotlin') {
  // Kotlin also depends on the result of Groovy compilation
  // which automatically makes it depend of compileGroovy
  classpath += files(sourceSets.main.groovy.classesDirectory)
}
